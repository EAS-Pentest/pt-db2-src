<server description="Sample Open Liberty server">
<!--
  <featureManager>
    <feature>restfulWS-3.1</feature>
    <feature>jsonb-3.0</feature>
    <feature>mpMetrics-5.1</feature>
    <feature>mpHealth-4.0</feature>
    <feature>mpConfig-3.1</feature>
  </featureManager>
 -->
  <featureManager>
      <feature>jakartaee-10.0</feature>	   
      <feature>adminCenter-1.0</feature>
      <feature>openidConnectClient-1.0</feature>
      <feature>openidConnectServer-1.0</feature>
      <feature>socialLogin-1.0</feature>
  </featureManager>

  <variable name="default.http.port" defaultValue="9080"/>
  <variable name="default.https.port" defaultValue="9443"/>
  <variable name="app.context.root" defaultValue="/"/>

  <httpEndpoint host="*" httpPort="${default.http.port}" httpsPort="${default.https.port}" id="defaultHttpEndpoint"/>
	
  <!--
  <keyStore
		id="defaultKeyStore"
		password="{aes}ANAw/zVd2DRhHU7bd82rfxwa0Ets+b7hR07Io27P5ZML"
		type="jks"
		location="${server.config.dir}/key.jks" />
   -->
	
    <basicRegistry id="basic" realm="PentestRealm">
        <user name="${adminUser}" password="${adminUserPwd}"/>
    </basicRegistry>
    <!--
	user name="adminUser" password="notAPwd4Admin"/>
	<user name="readerUser" password="notAPwd4Reader"/>
        <user name="employeeUser" password="notAPwd4Employee"/>
        <user name="managerUser" password="notAPwd4Manager"/>
    -->	
    <administrator-role>
        <user>adminUser</user>
    </administrator-role>


   <openidConnectClient 
      id="{clientID}" 
      clientId="${clientID}" 
      clientSecret="${clientSecret}" 
      mapIdentityToRegistryUser="true" 
      discoveryEndpointUrl="${OIDC_DISCOVERY_HOST}/oidc/endpoint/OidcProvider/.well-known/openid-configuration" 
      userInfoEndpointEnabled="true" />
      <!-- authFilterRef="simpleServletFilter" -->
      <!-- clientId="client01"  -->	
      <-- clientSecret="notAPwd4Client01" -->	
	

  <!--
    <authFilter id="simpleServletFilter">
        <requestUrl id="simpleServletUrl" matchType="contains" urlPattern="/SimpleServlet"/>
    </authFilter>
  -->
  <!--	
   <oidcLogin 
     id="client02" 
     clientId="client02"  
     clientSecret="notAPwd4Client02" 
     displayName="client02" 
     userInfoEndpointEnabled="true" 
     mapToUserRegistry="true" 
     discoveryEndpoint="${OIDC_DISCOVERY_HOST}/oidc/endpoint/OidcProvider/.well-known/openid-configuration" 
     hostNameVerificationEnabled="false" 
     signatureAlgorithm="HS256"/>
    -->	
     <!-- authFilterRef="secureSimpleServletFilter" -->	
   <!--
    <authFilter id="secureSimpleServletFilter">
        <requestUrl id="secureSimpleServletUrl" matchType="contains" urlPattern="/SecureSimpleServlet"/>
    </authFilter>
   -->

     <openidConnectProvider 
	id="OidcProvider" 
	oauthProviderRef="OAuthProvider" 
	keyStoreRef="defaultKeyStore" 
        signatureAlgorithm="RS256" 
	jwkEnabled="true"/>

   <!-- "internalClientId" is needed to get Personal Token and User Token management tools to display in admin center 
	after it's registered manually via Client Management tool; i
	nternalClientID and internalClientSecret match a defined client and are used in creating app-passwords and app-tokens  -->

      <!--
	<client 
		id="client_internal" 
		name="client_internal" 
		secret="notAPwd4ClientInt" 
		displayname="client_internal" 
		scope="openid profile email ">
	    </client>
	-->
	
      <oauthProvider 
	 id="OAuthProvider" 
	 autoAuthorizeParam="autoauthz" 
	 tokenFormat="mpjwt" 
	 passwordGrantRequiresAppPassword="true" 
	 internalClientId="client_internal"  
	 internalClientSecret="notAPwd4ClientInt" 
	 appPasswordLifetime="30d">           

            <client 
		id="${clientID}" 
		name="${clientID}" 
		secret="${clientSecret}" 
		displayname="{clientID}" 
		scope="openid profile email ">
                <redirect>${OIDC_DISCOVERY_HOST}/oidcclient/redirect/client01</redirect>
            </client>
	      
            <autoAuthorizeClient>${clientID}</autoAuthorizeClient>
           <databaseStore dataSourceRef="OAuthDataSource" />                   
    </oauthProvider>
	
    <!--
	<client 
	        id="client02" 
		name="client02" 
		secret="notAPwd4Client02" 
		displayname="client02" 
		scope="openid profile email ">
                <redirect>${OIDC_CLIENT_REDIRECT}/ibm/api/social-login/redirect/client02</redirect>
	    </client>

	<autoAuthorizeClient>client02</autoAuthorizeClient>
    -->
	
    <oauth-roles>
       <authenticated>
           <user name="${adminUser}"/>
           <special-subject type="ALL_AUTHENTICATED_USERS"/>
       </authenticated>
       <clientManager>
            <user name="${adminUser}" />
       </clientManager>
    </oauth-roles>

    <!--
	<tokenManager>
            <user name="adminUser" />
       </tokenManager>
    -->	
	
    <!-- DB2 JDBC driver -->
    <include location="${shared.resource.dir}/ease/db2/jdbc4.xml"/>
	      
   <!--jdbc4.xml
	<jdbcDriver id="ease.db2jcc4" libraryRef="ease.jdbc4.lib"/>
        <library id="ease.jdbc4.lib"> 
            <fileset dir="${shared.resource.dir}/ease/db2" includes="db2jcc4.jar"/>
        </library>
   --> 
     
    <dataSource id="OAuthDataSource" jndiName="jdbc/db2cloud"  jdbcDriverRef="ease.db2jcc4">
       <properties.db2.jcc serverName="${db2HostName}"
                      portNumber="${db2Port}"
                      databaseName="${dbName}"
                      sslConnection="true"
                      user="${db2UserName}"
                      password="${Db2Credentials}"/>
    </dataSource>
   <!--	
   <dataSource id="OAuthDataSource" >
        <jdbcDriver libraryRef="DerbyLib" />
           <properties.derby.embedded
                   databaseName="${server.config.dir}/resources/derby/OAuthTestDB"
               createDatabase="create"
               user="bob" password="notAPwd4dbuser1" />
   </dataSource>
   -->
	      
  <applicationManager autoExpand="true" />

  <mpMetrics authentication="false" />

  <webApplication location="io.openliberty.sample.getting.started.war" contextRoot="${app.context.root}"/>
</server>
